{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Vocabulaire\n",
    "* strengths == forces\n",
    "* weaknesses == faiblesses\n",
    "* data wrangling == conflits de donnees\n",
    "* gather requirement == exigence de collecte\n",
    "* map out that (our data must be stored) == faire en sorte que\n",
    "* entity mapping == cartographie des entites\n",
    "* to hold == contenir\n",
    "* horizontal scalability == évolutivité horizontale\n",
    "*  Key Lookups performed by key_value store =  Recherches de clés effectuées par le magasin de valeurs de cléss\n",
    "* workload == charge de travail\n",
    "* hindrance == entrave"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Definition \n",
    "* A **database** is an organized collection of data, generally stored and accessed electronically from a computer system.\n",
    "* The software used to access the database by the user and application is the **database management system DBMS**.MySql, Oracle\n",
    "* **DDL Data Definition Language*** which deals with database schemas and descriptions, of how the data should reside in the database.CREATE , ALTER, DROP, RENAME\n",
    "* **DML Data Manipulation Language** which deals with data manipulation and includes most common SQL statements such SELECT, INSERT, UPDATE, DELETE, etc., and it is used to store, modify, retrieve, delete and update data in a database\n",
    "* **DCL Data control language** – controls access to data\n",
    "* **RDBMS** Relational Database management system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Introduction\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Data can be stored, updated, or deleted from a database. \n",
    "* Database is a collection of inter-related data\n",
    "* [inroduction DBMS](https://www.geeksforgeeks.org/introduction-of-dbms-database-management-system-set-1/)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### What is Data Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* abstractio that organizes elements of data and how they will relate to each other\n",
    "* Data modeling can easily translate to database modeling\n",
    "* is organize data into a database ststem to ensure that your data is persisted and easily usable\n",
    "* support your business and user application\n",
    "* gather requirement(stored, persisted and related to each other)\n",
    "* Conceptual data modeling, is mapping the concepts of the data, think about relation between data (ERP?)\n",
    "* Logical data modeling, contextual models are mapped to logical models using tables, schemas and columns\n",
    "* Physical Data modeling is done transforming logical data model to the database definition language or DDL to create tables and the schemas\n",
    "* \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![data modeling](./image/dataModeling.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* data modeling as the process of designing data and making it available to machine learning engineers, data scientists, business analytics, etc., so they can make use of it easily.\n",
    "* iterative process. Data engineers continually reorganize, restructure, and optimize data models to fit the needs of the organization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Why is data modeling Important"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* data organization, determines later data use\n",
    "* use cases, well thought out and organized data model\n",
    "* starting early, Thinking and planning ahead\n",
    "* iterative process, as new requirements and data are introduced"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Who does this type of work"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "everyone who dealing with data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1_Relationnal Database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![relationalModel](./image/relationnalModel.png)\n",
    "* is a digital database based on the relationnal model of data \n",
    "* to maintian relationl databases, use RDBMS\n",
    "* SQL language used across all relational database system for querying and maintaining the database\n",
    "* difeerent type of relational databases, Oracle, Teradata, MySql, PostgreSql, sqlite"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Database/Schema --> collection of tables\n",
    "* Tables/Relation --> group of rows sharing the same labeled elements or columns\n",
    "* Columns/Attribute --> labeled element\n",
    "* Rows/Tuple --> a single item"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### When to use a relational Database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Flexibility for writing in SQL queries: With SQL being the most common database query language.\n",
    "* Modeling the data not modeling queries\n",
    "* Ability to do JOINS\n",
    "* Ability to do aggregations and analytics\n",
    "* Secondary Indexes available : You have the advantage of being able to add another index to help with quick searching.\n",
    "* Smaller data volumes: If you have a smaller data volume (and not big data) you can use a relational database for its simplicity.\n",
    "* ACID Transactions: Allows you to meet a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, and thus maintain data integrity.\n",
    "* Easier to change to business requirements\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ACID Transactions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Properties to guarantee vaildity even errors or power failures\n",
    "* **Atomicity**: whole transaction is processed or nothing is processed\n",
    "* **Consistency**: Only transactions that abide by constraints and rules are written into the database, otherwise the database keeps the previous state in all columns and table\n",
    "* **Isolation**:Transactions are processed independently and securely, A low level of isolation enables many users to access the data simultaneously, however this also increases the possibilities of concurrency effects (e.g., dirty reads or lost updates). On the other hand, a high level of isolation reduces these chances of concurrency effects, but also uses more system resources and transactions blocking each other\n",
    "* **Durability**: Completed transactions are saved to database even in cases of system failure."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### When not to use a Relationnal Database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **Large amounts of data**. not distributed databases and because of this they can only scale vertically by adding more storage in the machine itself. You cannot add more machines like you can in NoSQL databases. \n",
    "* **Need to be able to store different data type formats**.  Relational databases are not designed to handle unstructured data.\n",
    "* **Need high throughput -- fast reads**. ACID transactions slow down the process of reading and writing data\n",
    "* **Need a flexible schema**. Flexible schema can allow for columns to be added that do not have to be used by every row, saving disk space.\n",
    "* **Need high availability**. relational databases are not distributed , they have a single point of failure. When that database goes down, a fail-over to a backup system occurs and takes time.\n",
    "* **Need horizontal scalability**: Horizontal scalability is the ability to add more machines or nodes to a system to increase performance and space for data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. ![ Lien postgreSqlFr rapide](https://www.postgresql.fr/guidedemarragerapide)\n",
    "2. ![Lien pdf postGreSql Complet](https://docs.postgresql.fr/12/pg12.pdf)\n",
    "3. ![Data types](https://www.postgresql.org/docs/9.5/datatype.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2_NoSQL Databases"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* simple design\n",
    "* simpler horizontal scaling\n",
    "* finer control of availlability"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* NoSQl == Non Relational == Not Only SQL\n",
    "* Various type of data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* common types of NoSql db because different imlementation with uses cases\n",
    "    * Apache Cassandra (Partition Row Store), \n",
    "        * data distribued by partitions across nodes or servers\n",
    "        * data organized in rows and columns\n",
    "    * MongoDB (Document Store)\n",
    "        * Key Lookups performed by key_value store\n",
    "        * database offeres an API or query language that retrive document based om its contents\n",
    "    * DynamoDB (Key-value store)\n",
    "        * collection of key and value pairs\n",
    "    * Apache HBase (Wide Column Store)\n",
    "        * use rows, columns, tables\n",
    "        * names and format of the columns can vary from row to row in the same table\n",
    "    * Neo4j (Graph Database)\n",
    "        * relationships between entities\n",
    "        * data respresented as nodes and edges\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![basicsApacheCassandra](basicsApacheCassandra.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![basicsApache cassandra2](basicsApachecassandra2.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### What is Apache Cassandra?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* provides scalability and high availibility without compromising performance\n",
    "* Linear scalability and proven fault_tolerance on commodity hardware or cloud structure\n",
    "* uses it own query language == CQL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Good uses cases for NoSql and specifically Apache Cassandra:\n",
    "    * Transaction login(retail, health care)\n",
    "    * Internet of Things(IoT)\n",
    "    * Time series data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hindrance for my analytics work\n",
    "* analysys with `GROUP BY` statements becaiuse Apache Cassandra requires data modeling based on the query we want\n",
    "* add clustering columns into data model and create new tables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### When to use a NoSql Database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Need to be able to store different data type formats.structured, semi-structured, and unstructured data. JSON, XML documents can all be handled easily with NoSQ\n",
    "* Large amounts of data. \n",
    "    * Relational Databases are not distributed databases --> can only scale vertically by adding more storage in the machine itself\n",
    "    * NoSQL databases  to be able to be horizontally scalable\n",
    "    * ==> more servers/systems add to the database, the more data can be hosted with high availability and low latency\n",
    "* Need horizontal scalability: dd more machines or nodes to a system to increase performance and space for data\n",
    "* Need high throughput\n",
    "* Need a flexible schema, can allow for columns to be added that do not have to be used by every row, saving disk space\n",
    "* Need high availability: because relationnal database, When that database goes down, a failover to a backup system must happen and takes time.\n",
    "* users are distribued"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### When to not use a NoSQL Database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* small dataset\n",
    "* ACID transactions (MongoDB support ACID transactions and MarkLogic)\n",
    "* need the ability to do JOINs across tables\n",
    "* need aggregations ans analytics\n",
    "* changing business requirements\n",
    "* if my queries(i do in advance) is not avalilable and i need flexibility"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
